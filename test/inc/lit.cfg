# -*- Python -*-

import os
import sys
import re
import platform
import lit.util
import lit.formats

config.name = 'Seahorn'

config.test_format = lit.formats.ShTest(execute_external=False)
config.suffixes = ['.c', '.cpp']
config.excludes = []
config.test_source_root = os.path.dirname(__file__)
config.test_exec_root = lit_config.params.get('test_dir', '.')
config.useProgressBar= True
config.showOutput= True
config.timeout=30
config.max_time=30

repositoryRoot = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

def addEnv(name):
   if name in os.environ:
      config.environment[name] = os.environ[name]

def isexec (fpath):
    if fpath == None: return False
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

def which(program):
   if isinstance (program, str): 
      choices = [program]
   else:
      choices = program
   for p in choices:
      fpath, fname = os.path.split(p)
      if fpath:
         if isexec (p): return p
      else:
         for path in os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, p)
            if isexec (exe_file):
               return exe_file
   return None

def getSeaInc ():
    sea_inc = None
    # if 'SEAHORN' in os.environ: 
    #    seainc = os.environ ['SEAHORN']
    if not isexec (sea_inc): 
       sea_inc = which ('sea_inc')       
    if not isexec (sea_inc):
       sea_inc = os.path.join (repositoryRoot, '..', 'build', 'run', 'bin', 'sea_inc')
    print "Found sea_inc: " + sea_inc 
    return sea_inc

addEnv('HOME')
addEnv('PWD')
addEnv('C_INCLUDE_PATH')


lit_config.note('Repository root is {}'.format(repositoryRoot))

sea_inc_cmd = getSeaInc()
if not isexec(sea_inc_cmd):
   lit_config.fatal('Could not find the Seahorn executable')

config.substitutions.append(('%sea_inc', sea_inc_cmd))

## seahorn options here
#config.substitutions.append(('%dsa', "--horn-sea-dsa"))
#config.substitutions.append(('%abc_encoding', "2"))
