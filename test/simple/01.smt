(set-info :original "01.bc")
(set-info :authors "SeaHorn v.0.1.0-rc3")
(declare-rel verifier.error (Bool Bool Bool ))
(declare-rel main@entry (Int ))
(declare-rel main@.lr.ph.preheader (Int ))
(declare-rel main@.lr.ph (Int Int ))
(declare-rel main@.verifier.error_crit_edge (Int ))
(declare-rel main@verifier.error (Bool ))
(declare-rel main@verifier.error.split ())
(declare-var main@%_6_0 Bool )
(declare-var main@%_3_0 Int )
(declare-var main@%_4_0 Int )
(declare-var main@%_5_0 Bool )
(declare-var main@%_0_0 Int )
(declare-var main@%_1_0 Int )
(declare-var main@%_2_0 Bool )
(declare-var @unknown1_0 Int )
(declare-var main@%x.0.i.lcssa_0 Bool )
(declare-var main@%x.0.i1_0 Int )
(declare-var main@%factor_0 Int )
(declare-var main@%factor.lcssa_0 Int )
(declare-var main@%x.0.i1_1 Int )
(declare-var main@%phitmp_0 Bool )
(rule (verifier.error false false false))
(rule (verifier.error false true true))
(rule (verifier.error true false true))
(rule (verifier.error true true true))
(rule (main@entry @unknown1_0))
(rule (=> (and (main@entry @unknown1_0)
         true
         (= main@%_0_0 @unknown1_0)
         (= main@%_2_0 (= main@%_1_0 0))
         main@%_2_0
         (= main@%x.0.i.lcssa_0 false))
    (main@verifier.error main@%x.0.i.lcssa_0)))
(rule (=> (and (main@entry @unknown1_0)
         true
         (= main@%_0_0 @unknown1_0)
         (= main@%_2_0 (= main@%_1_0 0))
         (not main@%_2_0))
    (main@.lr.ph.preheader @unknown1_0)))
(rule (=> (and (main@.lr.ph.preheader @unknown1_0) true (= main@%x.0.i1_0 1))
    (main@.lr.ph main@%x.0.i1_0 @unknown1_0)))
(rule (=> (and (main@.lr.ph main@%x.0.i1_0 @unknown1_0)
         true
         (= main@%factor_0 (* main@%x.0.i1_0 2))
         (= main@%_3_0 @unknown1_0)
         (= main@%_5_0 (= main@%_4_0 0))
         main@%_5_0
         (= main@%factor.lcssa_0 main@%factor_0))
    (main@.verifier.error_crit_edge main@%factor.lcssa_0)))
(rule (=> (and (main@.lr.ph main@%x.0.i1_0 @unknown1_0)
         true
         (= main@%factor_0 (* main@%x.0.i1_0 2))
         (= main@%_3_0 @unknown1_0)
         (= main@%_5_0 (= main@%_4_0 0))
         (not main@%_5_0)
         (= main@%x.0.i1_1 main@%factor_0))
    (main@.lr.ph main@%x.0.i1_1 @unknown1_0)))
(rule (=> (and (main@.verifier.error_crit_edge main@%factor.lcssa_0)
         true
         (= main@%phitmp_0 (< main@%factor.lcssa_0 1))
         (= main@%x.0.i.lcssa_0 main@%phitmp_0))
    (main@verifier.error main@%x.0.i.lcssa_0)))
(rule (=> (and (main@verifier.error main@%x.0.i.lcssa_0)
         true
         (not main@%x.0.i.lcssa_0)
         (= main@%_6_0 (xor main@%x.0.i.lcssa_0 true)))
    main@verifier.error.split))
(query main@verifier.error.split)

